# 사용할 docker image를 지정해 줍니다.
image: node:latest
# stages 순서대로 pipeline이 형성됩니다.
stages:
  - build
# 이 전 작업과 동일한 내용인지를 확인해서 재사용 해주는 캐싱 메커니즘의 옵션입니다.
cache:
  paths:
    - frontend/node_modules/
build:
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build

deploy-to-s3:
# aws cli를 설치하기 위해서 python image를 사용합니다.
  image: python:latest
  stage: deploy
  script:
    - pip install awscli
# aws s3 sync 명령어를 활용하여 빌드된 파일을 나의 버킷에 올려주고 public-read가 가능하도록 설정해 줍니다.
    - aws s3 sync frontend/build s3://gitmagotchi-frontend --acl public-read
# 해당 stage는 master branch에서만 실행 가능하도록 설정해 줍니다.
  only:
    - dev-frontend
# deploy는 테스트와 실제 배포의 경우가 있을 수 있습니다.
# 이에 한 stage에서 여러 동작을 할 수 있도록 when: manual 을 넣어 줍니다.
  when: manual