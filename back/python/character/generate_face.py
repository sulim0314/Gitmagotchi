import uuid
import base64
import json
import logging
import boto3
import random
import io
from PIL import Image
from io import BytesIO
from botocore.exceptions import ClientError

MASK_IMAGE = ''

S3_BUCKET = 'gitmagotchi-character-image'  # S3 버킷 이름
AWS_REGION_VIRGINIA = 'us-east-1'
AWS_REGION_SEOUL = 'ap-northeast-2'  # 리전 정보
MODEL_ID = 'amazon.titan-image-generator-v1'

s3_client = boto3.client('s3', region_name=AWS_REGION_VIRGINIA)
translate_clinet = boto3.client('translate', region_name=AWS_REGION_SEOUL)
bedrock_client = boto3.client(service_name='bedrock-runtime')

class ImageGenerationError(Exception):
    """Base class for exceptions in this module."""
    pass

class ImageError(ImageGenerationError):
    """Exception raised for errors during image generation."""
    def __init__(self, message="An error occurred during image generation"):
        self.message = message
        super().__init__(self.message)

class PolicyViolationError(ImageGenerationError):
    """Exception raised for policy violations."""
    def __init__(self, message="Your message violates the AI policy"):
        self.message = message
        super().__init__(self.message)

class NotFoundException(Exception):
    """요청한 리소스를 찾을 수 없을 때 발생하는 예외"""
    def __init__(self, message="Requested resource not found"):
        self.message = message
        super().__init__(self.message)

def translate_user_input(userInput):
    source_language = 'auto'
    target_language = 'en'
    result = translate_clinet.translate_text(Text=userInput, SourceLanguageCode=source_language, TargetLanguageCode=target_language)
    print(f"{userInput} to {result}")
    return result.get('TranslatedText')

def generate_image(body):
    try:
        logging.info(f"Generating image with {MODEL_ID}")

        accept = "application/json"
        content_type = "application/json"
        response = bedrock_client.invoke_model(
            body=body, modelId=MODEL_ID, accept=accept, contentType=content_type
        )
        response_body = json.loads(response.get("body").read())    
            
        # 에러 관련 처리
        if response_body.get("error"):
            error_message = response_body["error"]
            if "policy violation" in error_message.lower():
                raise PolicyViolationError
            else:
                raise ImageError(f"Image generation error: {error_message}")

        base64_image = response_body.get("images")[0]
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)

        logging.info(f"Successfully generated image with {MODEL_ID}")

        return image_bytes
    except PolicyViolationError as e:
        print(f"Policy violation: {e}")
        # 추가 처리 가능
        raise
    except ImageError as e:
        print(f"Image generation error: {e}")
        # 추가 처리 가능
        raise
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        # 예상치 못한 예외에 대한 처리
        raise

def weired_preprocess(userInput):
    dictionary = {
        'pussycat':'cat',
        'sweet potato':'purple potato',
        'Tigers':'tiger',
        'Cutie':'cute',
        'emissary':'lion'
    }

    # 사전에 정의된 각 단어를 확인하며 대체
    for key, value in dictionary.items():
        if key in userInput:
            userInput = userInput.replace(key, value)
    
    return userInput

def make_promt_body(userInput):
    transUserInput = translate_user_input(userInput) 
    prompt = weired_preprocess(transUserInput)
    text = f"""
    the border circle as a face and draw only the eyes, nose, and mouth of the {prompt} character image.
    Remember, you are not drawing a face in a circle, the circle is a face.    
    """

    # {translatedUserInput}'s head, cute, high quality, circle is head's border, the circle is a face, aligned, clear boundary

    face_file_name = "face.png"

    face_image_bytes = get_img_from_s3(face_file_name)
    
    seed = random.randint(400, 500)
    print("seed:", seed)
    return json.dumps({
        "taskType": "INPAINTING",
        "inPaintingParams": {
            "text": text,
            "negativeText": "bad quality, face in a circle, low res, real picture, person, noise, real, ugly, disgusting, background, square, crack, lacuna, body",
            "image": base64.b64encode(face_image_bytes).decode('utf-8'),
            "maskImage" : MASK_IMAGE
        },
        "imageGenerationConfig": {
            "numberOfImages": 1,
            "height": 512,
            "width": 512,
            "cfgScale": 10.0,
            "seed":seed
        }
    })

def upload_to_s3(image_bytes, bucket_name, file_name):
    """
    주어진 바이트 이미지를 S3 버킷에 업로드합니다.
    """
    s3_client.put_object(Bucket=bucket_name, Key=file_name, Body=image_bytes, ContentType='image/png')
    url = f"https://{bucket_name}.s3.{AWS_REGION_VIRGINIA}.amazonaws.com/{file_name}"
    return url
    
def get_img_from_s3(file_name):
    try:
        response = s3_client.get_object(Bucket=S3_BUCKET, Key=file_name)
        return response['Body'].read()
    except NotFoundException as e:
        logging.error(e)
        raise NotFoundException('Image on S3 not Found')

def remove_outside_with_mask(image_bytes, mask_bytes):
    # 이미지 바이트 데이터를 Image 객체로 변환
    image = Image.open(BytesIO(image_bytes)).convert("RGBA")
    mask = Image.open(BytesIO(mask_bytes)).convert("L")  # 마스크를 그레이스케일로 변환

    # 배경을 제거하고 마스크 적용
    result_image = Image.composite(image, Image.new("RGBA", image.size, (0,0,0,0)), mask)

    # 결과 이미지를 바이트로 변환하여 리턴
    byte_io = BytesIO()
    result_image.save(byte_io, 'PNG')
    byte_io.seek(0)
    return byte_io.getvalue()

def remove_white_background(image_bytes):
    # 바이트 데이터로부터 이미지를 로드한다.
    image = Image.open(BytesIO(image_bytes)).convert("RGBA")    

    datas = image.getdata()
    newData = []
    
    for item in datas:
        # 하얀색이면 투명하게 만든다.
        if item[0] > 220 and item[1] > 220 and item[2] > 220:
            newData.append((255, 255, 255, 0))
        else:
            newData.append(item)
    
    image.putdata(newData)
    
    # 결과 이미지를 바이트 데이터로 변환한다.
    byte_arr = io.BytesIO()
    image.save(byte_arr, format='PNG')
    return byte_arr.getvalue()    

def merge_image(base_image_bytes, overlay_image_bytes):
    # 기본 이미지(흰색 배경이 제거된 이미지) 로드
    base_image = Image.open(BytesIO(base_image_bytes)).convert("RGBA")
    # 오버레이 이미지(테두리가 제거된 이미지) 로드
    overlay_image = Image.open(BytesIO(overlay_image_bytes)).convert("RGBA")
    
    # 오버레이 이미지를 기본 이미지 위에 붙인다.
    base_image.paste(overlay_image, (0, 0), overlay_image)
    
    # 결과 이미지를 바이트로 변환하여 리턴
    byte_io = BytesIO()
    base_image.save(byte_io, format='PNG')
    byte_io.seek(0)
    return byte_io.getvalue()

def lambda_handler(event, context):
    try:
        print("event : ", event)
        json_body = event.get('body')
    
        if not json_body:
            raise ValueError('Invalid input data')    
        
        obj = json.loads(json_body)

        userInput = obj.get("userInput")
        
        if not userInput:
            raise ValueError('Missing userInput')

        body = make_promt_body(userInput)

        # 이미지 생성
        image_bytes = generate_image(body)     

        
        mask_file_name = "face_mask.png"
        mask_image_bytes = get_img_from_s3(mask_file_name)   
        
        try:
            removed_outside_image_bytes = remove_outside_with_mask(image_bytes, mask_image_bytes)
            removed_white_image_bytes = remove_white_background(image_bytes)
            reesult_image_bytes = merge_image(removed_white_image_bytes, removed_outside_image_bytes)        
        except Exception as e:
            raise Exception(f'Error occured on remove background... {e}')

        try:            
            # 생성된 이미지를 S3에 업로드하고 URL 받기
            file_name = f"image-{uuid.uuid4()}.png"  # 유니크한 파일 이름 생성
            image_url = upload_to_s3(reesult_image_bytes, S3_BUCKET, file_name)
        except (ClientError) as err:
                logging.error("Error uploading the image: %s", err)
                return {
                    'statusCode': 500,
                    'body': json.dumps({"error": str(err)})
                }
        return {
            'statusCode': 200,
            'body': json.dumps({"imageUrl": image_url})
        }
    except PolicyViolationError as e:
        logging.error(f"PolicyViolationError: {e}")
        return {
            'statusCode': 400,
            'body': json.dumps({'error': str(e)})
        }
    except ImageError as e:
        logging.error(f"ImageError: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
    except NotFoundException as e:
        logging.error(f"NotFoundException: {e}")
        return {
            'statusCode': 404,
            'body': json.dumps({'error': str(e)})
        }
    except ValueError as e:
        logging.error(f"ValueError: {e}")
        return {
            'statusCode': 400,
            'body': json.dumps({'error': str(e)})
        }
    except Exception as e:
        logging.error(f"Internal server error: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': 'Internal server error', 'detail': str(e)})
        }  
